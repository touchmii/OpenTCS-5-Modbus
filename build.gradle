buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    // License plugin
    classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.12.1'
    // Versions plugin
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    // Stats plugin
    classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.0'
  }
}

apply plugin: 'base'
apply plugin: 'distribution'
apply plugin: 'groovy'

apply from: "${rootDir}/gradle/common.gradle"

repositories {
  jcenter();
}

dependencies {
  compile localGroovy()
  compile group: 'commons-io', name: 'commons-io', version: '2.5'
  compileOnly group: 'commons-io', name: 'commons-io', version: '2.5', classifier: 'sources'
}

subprojects {
  apply from: rootProject.file('gradle/common.gradle')
}

evaluationDependsOnChildren()

distributions {
  main {
    contents.from {
      project(':openTCS-Example-Kernel').ext.collectableDistDir
    }
    contents.from {
      project(':openTCS-Example-KernelControlCenter').ext.collectableDistDir
    }
    contents.from {
      project(':openTCS-Example-PlantOverview').ext.collectableDistDir
    }
    contents.from {
      project(':openTCS-Example-Documentation').ext.collectableDistDir
    }
  }
}

task subDists {
  dependsOn(':openTCS-Example-Kernel:installDist')
  dependsOn(':openTCS-Example-KernelControlCenter:installDist')
  dependsOn(':openTCS-Example-PlantOverview:installDist')
  dependsOn(':openTCS-Example-Documentation:installDist')
}

installDist.dependsOn subDists

distZip {
  classifier = 'bin'
  dependsOn subDists
}

distTar {
  classifier = 'bin'
  dependsOn subDists
  compression = Compression.GZIP
}

task distSrcZip(type: Zip) {
  classifier = 'src'
  from "${rootDir}"

  includes << 'config/**'
  includes << 'gradle/**'
  includes << 'lib/**'
  includes << 'openTCS-*/**'
  includes << 'src/**'
  includes << '.nb-gradle-properties'
  includes << '*.gradle'
  includes << 'gradlew'
  includes << 'gradlew.bat'
  includes << 'README.md'

  excludes << '.gradle'
  excludes << '**/build'
}

artifacts {
  archives distZip
  archives distTar
  archives distSrcZip
}

build {
  dependsOn subprojects*.build
  dependsOn installDist
}

// tag::cloneTask
task cloneProject(type: JavaExec) {
  main = 'de.fraunhofer.iml.opentcs.scripts.CloneScript'
 
  classpath = sourceSets.main.runtimeClasspath
 
  def integrationName = 'MyCustomProject'
  def classPrefix = 'Custom'
  if (project.hasProperty('integrationName')) {
    integrationName = project.getProperty('integrationName')
  }
  if (project.hasProperty('classPrefix')) {
    classPrefix = project.getProperty('classPrefix')
  }
  
  // Pass command-line argument to script, if any.
  args integrationName, classPrefix
}
// tag::cloneTask
